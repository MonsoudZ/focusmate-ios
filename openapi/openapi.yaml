openapi: 3.0.3
info:
  title: Focusmate API
  description: API for Focusmate task management application
  version: 1.0.0
  contact:
    name: Focusmate Team
servers:
  - url: https://api.focusmate.com
    description: Production server
  - url: https://staging-api.focusmate.com
    description: Staging server
  - url: http://localhost:3000
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/sign_in:
    post:
      tags:
        - Authentication
      summary: Sign in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Successful sign in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/sign_up:
    post:
      tags:
        - Authentication
      summary: Sign up new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/sign_out:
    delete:
      tags:
        - Authentication
      summary: Sign out user
      responses:
        '204':
          description: Successfully signed out
        '401':
          description: Unauthorized

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh authentication token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '401':
          description: Invalid or expired token

  # User endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get users with delta sync
      parameters:
        - name: since
          in: query
          description: ISO8601 timestamp for delta sync
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'

  /profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  # List endpoints
  /lists:
    get:
      tags:
        - Lists
      summary: Get all lists
      parameters:
        - name: since
          in: query
          description: ISO8601 timestamp for delta sync
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsResponse'

    post:
      tags:
        - Lists
      summary: Create new list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '201':
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDTO'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{id}:
    get:
      tags:
        - Lists
      summary: Get list by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDTO'
        '404':
          description: List not found

    put:
      tags:
        - Lists
      summary: Update list
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
      responses:
        '200':
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDTO'
        '404':
          description: List not found

    delete:
      tags:
        - Lists
      summary: Delete list
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: List deleted successfully
        '404':
          description: List not found

  /lists/{id}/share:
    post:
      tags:
        - Lists
      summary: Share list with user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareListRequest'
      responses:
        '201':
          description: List shared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareListResponse'

  /lists/{id}/shares:
    get:
      tags:
        - Lists
      summary: Get list shares
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of shares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListShare'

  /lists/{id}/shares/{shareId}:
    delete:
      tags:
        - Lists
      summary: Remove list share
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: shareId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Share removed successfully
        '404':
          description: Share not found

  # Task/Item endpoints
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks with delta sync
      parameters:
        - name: since
          in: query
          description: ISO8601 timestamp for delta sync
          required: false
          schema:
            type: string
            format: date-time
        - name: list_id
          in: query
          description: Filter by list ID
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsResponse'

  /lists/{listId}/tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks for specific list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
        - name: since
          in: query
          description: ISO8601 timestamp for delta sync
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of tasks for the list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

    post:
      tags:
        - Tasks
      summary: Create new task in list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Task not found

    put:
      tags:
        - Tasks
      summary: Update task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Task not found

    delete:
      tags:
        - Tasks
      summary: Delete task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found

  /tasks/{id}/complete:
    post:
      tags:
        - Tasks
      summary: Complete task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskRequest'
      responses:
        '200':
          description: Task completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /tasks/{id}/reassign:
    patch:
      tags:
        - Tasks
      summary: Reassign task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReassignTaskRequest'
      responses:
        '200':
          description: Task reassigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /tasks/{id}/explanations:
    post:
      tags:
        - Tasks
      summary: Submit task explanation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplanationRequest'
      responses:
        '201':
          description: Explanation submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskExplanation'

  # Escalation endpoints
  /escalations/blocking:
    get:
      tags:
        - Escalations
      summary: Get blocking tasks
      responses:
        '200':
          description: List of blocking tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingTasksResponse'

  /escalations:
    post:
      tags:
        - Escalations
      summary: Create escalation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscalationRequest'
      responses:
        '201':
          description: Escalation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationResponse'

  /escalations/{id}/resolve:
    patch:
      tags:
        - Escalations
      summary: Resolve escalation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveEscalationRequest'
      responses:
        '200':
          description: Escalation resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationResponse'

  # Device endpoints
  /devices:
    post:
      tags:
        - Devices
      summary: Register device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRegistrationRequest'
      responses:
        '201':
          description: Device registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceRegistrationResponse'

  /devices/token:
    put:
      tags:
        - Devices
      summary: Update device token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceTokenRequest'
      responses:
        '204':
          description: Device token updated successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication schemas
    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    SignInResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'

    SignUpRequest:
      type: object
      required:
        - email
        - password
        - passwordConfirmation
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        passwordConfirmation:
          type: string
          minLength: 6
        name:
          type: string

    SignUpResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'

    TokenRefreshResponse:
      type: object
      required:
        - token
        - expiresAt
      properties:
        token:
          type: string
        expiresAt:
          type: string
          format: date-time

    # User schemas
    UserDTO:
      type: object
      required:
        - id
        - email
        - role
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
          nullable: true
        role:
          type: string
          enum: [coach, client]
        timezone:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true

    UserProfile:
      type: object
      required:
        - id
        - email
        - name
        - role
        - timezone
        - accessibleListsCount
        - createdAt
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
        timezone:
          type: string
        accessibleListsCount:
          type: integer
        createdAt:
          type: string
          format: date-time

    # List schemas
    ListDTO:
      type: object
      required:
        - id
        - name
        - owner
        - role
        - tasksCount
        - overdueTasksCount
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        owner:
          $ref: '#/components/schemas/UserDTO'
        role:
          type: string
          enum: [owner, editor, viewer]
        sharedWithCoaches:
          type: array
          items:
            $ref: '#/components/schemas/CoachShare'
        tasksCount:
          type: integer
        overdueTasksCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ListsResponse:
      type: object
      required:
        - lists
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListDTO'

    CreateListRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true

    UpdateListRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true

    CoachShare:
      type: object
      required:
        - id
        - coach
        - permissions
      properties:
        id:
          type: integer
        coach:
          $ref: '#/components/schemas/UserDTO'
        permissions:
          type: array
          items:
            type: string

    ListShare:
      type: object
      required:
        - id
        - list_id
        - user_id
        - role
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        list_id:
          type: integer
        user_id:
          type: integer
        role:
          type: string
          enum: [viewer, editor, admin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/UserDTO'
          nullable: true

    ShareListRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [viewer, editor, admin]

    ShareListResponse:
      type: object
      required:
        - id
        - list_id
        - email
        - role
        - status
        - invitation_token
        - permissions
        - invited_at
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        list_id:
          type: integer
        email:
          type: string
          format: email
        role:
          type: string
        status:
          type: string
        invitation_token:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
          nullable: true
        permissions:
          $ref: '#/components/schemas/SharePermissions'
        invited_at:
          type: string
          format: date-time
        accepted_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SharePermissions:
      type: object
      required:
        - can_view
        - can_edit
        - can_add_items
        - can_delete_items
        - receive_notifications
      properties:
        can_view:
          type: boolean
        can_edit:
          type: boolean
        can_add_items:
          type: boolean
        can_delete_items:
          type: boolean
        receive_notifications:
          type: boolean

    # Task/Item schemas
    Item:
      type: object
      required:
        - id
        - list_id
        - title
        - priority
        - can_be_snoozed
        - notification_interval_minutes
        - requires_explanation_if_missed
        - overdue
        - minutes_overdue
        - requires_explanation
        - is_recurring
        - recurrence_interval
        - location_based
        - location_radius_meters
        - notify_on_arrival
        - notify_on_departure
        - creator
        - created_by_coach
        - can_edit
        - can_delete
        - can_complete
        - is_visible
        - has_subtasks
        - subtasks_count
        - subtasks_completed_count
        - subtask_completion_percentage
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        list_id:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        due_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        priority:
          type: integer
          minimum: 0
          maximum: 3
        can_be_snoozed:
          type: boolean
        notification_interval_minutes:
          type: integer
        requires_explanation_if_missed:
          type: boolean
        overdue:
          type: boolean
        minutes_overdue:
          type: integer
        requires_explanation:
          type: boolean
        is_recurring:
          type: boolean
        recurrence_pattern:
          type: string
          nullable: true
        recurrence_interval:
          type: integer
        recurrence_days:
          type: array
          items:
            type: integer
          nullable: true
        location_based:
          type: boolean
        location_name:
          type: string
          nullable: true
        location_latitude:
          type: number
          format: double
          nullable: true
        location_longitude:
          type: number
          format: double
          nullable: true
        location_radius_meters:
          type: integer
        notify_on_arrival:
          type: boolean
        notify_on_departure:
          type: boolean
        missed_reason:
          type: string
          nullable: true
        missed_reason_submitted_at:
          type: string
          format: date-time
          nullable: true
        missed_reason_reviewed_at:
          type: string
          format: date-time
          nullable: true
        creator:
          $ref: '#/components/schemas/UserDTO'
        created_by_coach:
          type: boolean
        can_edit:
          type: boolean
        can_delete:
          type: boolean
        can_complete:
          type: boolean
        is_visible:
          type: boolean
        escalation:
          $ref: '#/components/schemas/Escalation'
          nullable: true
        has_subtasks:
          type: boolean
        subtasks_count:
          type: integer
        subtasks_completed_count:
          type: integer
        subtask_completion_percentage:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ItemsResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'

    CreateItemRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        due_at:
          type: string
          format: date-time
          nullable: true
        is_visible:
          type: boolean
          nullable: true

    UpdateItemRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        completed:
          type: boolean
          nullable: true
        due_at:
          type: string
          format: date-time
          nullable: true
        is_visible:
          type: boolean
          nullable: true

    CompleteTaskRequest:
      type: object
      properties:
        notes:
          type: string
          nullable: true

    ReassignTaskRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer

    ExplanationRequest:
      type: object
      required:
        - explanation_type
      properties:
        explanation_type:
          type: string
          enum: [Missed Deadline, Blocked, Delayed, Reassigned, Completed Late, Other]
        notes:
          type: string
          nullable: true

    TaskExplanation:
      type: object
      required:
        - id
        - item_id
        - user_id
        - explanation_type
        - created_at
      properties:
        id:
          type: integer
        item_id:
          type: integer
        user_id:
          type: integer
        explanation_type:
          type: string
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    # Escalation schemas
    Escalation:
      type: object
      required:
        - id
        - level
        - notification_count
        - blocking_app
        - coaches_notified
      properties:
        id:
          type: integer
        level:
          type: string
        notification_count:
          type: integer
        blocking_app:
          type: boolean
        coaches_notified:
          type: boolean
        became_overdue_at:
          type: string
          format: date-time
          nullable: true
        last_notification_at:
          type: string
          format: date-time
          nullable: true

    BlockingTask:
      type: object
      required:
        - id
        - name
        - list_id
        - list_name
        - escalation_count
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
        list_id:
          type: integer
        list_name:
          type: string
        escalation_count:
          type: integer
        last_escalated_at:
          type: string
          format: date-time
          nullable: true
        blocking_reason:
          type: string
          nullable: true

    BlockingTasksResponse:
      type: object
      required:
        - tasks
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/BlockingTask'

    EscalationRequest:
      type: object
      required:
        - item_id
        - level
      properties:
        item_id:
          type: integer
        level:
          type: string
          enum: [low, medium, high, critical]
        reason:
          type: string
          nullable: true

    EscalationResponse:
      type: object
      required:
        - id
        - item_id
        - level
        - status
        - created_at
      properties:
        id:
          type: integer
        item_id:
          type: integer
        level:
          type: string
        status:
          type: string
        reason:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    ExplanationResponse:
      type: object
      required:
        - id
        - item_id
        - user_id
        - explanation_type
        - created_at
      properties:
        id:
          type: integer
        item_id:
          type: integer
        user_id:
          type: integer
        explanation_type:
          type: string
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    ExplanationsResponse:
      type: object
      required:
        - explanations
      properties:
        explanations:
          type: array
          items:
            $ref: '#/components/schemas/TaskExplanation'

    ResolveEscalationRequest:
      type: object
      properties:
        resolution_notes:
          type: string
          nullable: true

    # Device schemas
    DeviceRegistrationRequest:
      type: object
      required:
        - device_id
        - platform
        - app_version
      properties:
        device_id:
          type: string
        platform:
          type: string
          enum: [ios, android]
        app_version:
          type: string
        push_token:
          type: string
          nullable: true

    DeviceRegistrationResponse:
      type: object
      required:
        - id
        - device_id
        - platform
        - created_at
      properties:
        id:
          type: integer
        device_id:
          type: string
        platform:
          type: string
        created_at:
          type: string
          format: date-time

    Device:
      type: object
      required:
        - id
        - device_id
        - platform
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        device_id:
          type: string
        platform:
          type: string
        app_version:
          type: string
          nullable: true
        push_token:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UpdateDeviceTokenRequest:
      type: object
      required:
        - push_token
      properties:
        push_token:
          type: string

    # Error schemas
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties:
            type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
          nullable: true
        requestId:
          type: string
          nullable: true

    # Empty response
    EmptyResponse:
      type: object
