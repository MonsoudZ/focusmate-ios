//
// ListsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class ListsAPI {
    /**
     Get all lists

     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsGet(since: Date? = nil, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        listsGetWithRequestBuilder(since: since).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all lists
     - GET /lists
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - returns: RequestBuilder<ListsResponse>
     */
    open class func listsGetWithRequestBuilder(since: Date? = nil) -> RequestBuilder<ListsResponse> {
        let localVariablePath = "/lists"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListsResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete list

     - parameter id: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsIdDelete(id: Int, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        listsIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete list
     - DELETE /lists/{id}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - returns: RequestBuilder<Void>
     */
    open class func listsIdDeleteWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list by ID

     - parameter id: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsIdGet(id: Int, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListDTO?, _ error: Error?) -> Void)) -> RequestTask {
        listsIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get list by ID
     - GET /lists/{id}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - returns: RequestBuilder<ListDTO>
     */
    open class func listsIdGetWithRequestBuilder(id: Int) -> RequestBuilder<ListDTO> {
        var localVariablePath = "/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListDTO>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update list

     - parameter id: (path)
     - parameter updateListRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsIdPut(id: Int, updateListRequest: UpdateListRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListDTO?, _ error: Error?) -> Void)) -> RequestTask {
        listsIdPutWithRequestBuilder(id: id, updateListRequest: updateListRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update list
     - PUT /lists/{id}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter updateListRequest: (body)
     - returns: RequestBuilder<ListDTO>
     */
    open class func listsIdPutWithRequestBuilder(id: Int, updateListRequest: UpdateListRequest) -> RequestBuilder<ListDTO> {
        var localVariablePath = "/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListDTO>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Share list with user

     - parameter id: (path)
     - parameter shareListRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsIdSharePost(id: Int, shareListRequest: ShareListRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShareListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        listsIdSharePostWithRequestBuilder(id: id, shareListRequest: shareListRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Share list with user
     - POST /lists/{id}/share
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter shareListRequest: (body)
     - returns: RequestBuilder<ShareListResponse>
     */
    open class func listsIdSharePostWithRequestBuilder(id: Int, shareListRequest: ShareListRequest) -> RequestBuilder<ShareListResponse> {
        var localVariablePath = "/lists/{id}/share"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shareListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShareListResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list shares

     - parameter id: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsIdSharesGet(id: Int, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ListShare]?, _ error: Error?) -> Void)) -> RequestTask {
        listsIdSharesGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get list shares
     - GET /lists/{id}/shares
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - returns: RequestBuilder<[ListShare]>
     */
    open class func listsIdSharesGetWithRequestBuilder(id: Int) -> RequestBuilder<[ListShare]> {
        var localVariablePath = "/lists/{id}/shares"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ListShare]>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove list share

     - parameter id: (path)
     - parameter shareId: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsIdSharesShareIdDelete(id: Int, shareId: Int, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        listsIdSharesShareIdDeleteWithRequestBuilder(id: id, shareId: shareId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove list share
     - DELETE /lists/{id}/shares/{shareId}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter shareId: (path)
     - returns: RequestBuilder<Void>
     */
    open class func listsIdSharesShareIdDeleteWithRequestBuilder(id: Int, shareId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/lists/{id}/shares/{shareId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let shareIdPreEscape = "\(APIHelper.mapValueToPathItem(shareId))"
        let shareIdPostEscape = shareIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shareId}", with: shareIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create new list

     - parameter createListRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsPost(createListRequest: CreateListRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListDTO?, _ error: Error?) -> Void)) -> RequestTask {
        listsPostWithRequestBuilder(createListRequest: createListRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create new list
     - POST /lists
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter createListRequest: (body)
     - returns: RequestBuilder<ListDTO>
     */
    open class func listsPostWithRequestBuilder(createListRequest: CreateListRequest) -> RequestBuilder<ListDTO> {
        let localVariablePath = "/lists"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListDTO>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
