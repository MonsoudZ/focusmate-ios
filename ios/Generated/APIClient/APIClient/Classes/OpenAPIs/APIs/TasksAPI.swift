//
// TasksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class TasksAPI {
    /**
     Get tasks for specific list

     - parameter listId: (path)
     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsListIdTasksGet(listId: Int, since: Date? = nil, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Item]?, _ error: Error?) -> Void)) -> RequestTask {
        listsListIdTasksGetWithRequestBuilder(listId: listId, since: since).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get tasks for specific list
     - GET /lists/{listId}/tasks
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter listId: (path)
     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - returns: RequestBuilder<[Item]>
     */
    open class func listsListIdTasksGetWithRequestBuilder(listId: Int, since: Date? = nil) -> RequestBuilder<[Item]> {
        var localVariablePath = "/lists/{listId}/tasks"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Item]>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create new task in list

     - parameter listId: (path)
     - parameter createItemRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listsListIdTasksPost(listId: Int, createItemRequest: CreateItemRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Item?, _ error: Error?) -> Void)) -> RequestTask {
        listsListIdTasksPostWithRequestBuilder(listId: listId, createItemRequest: createItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create new task in list
     - POST /lists/{listId}/tasks
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter listId: (path)
     - parameter createItemRequest: (body)
     - returns: RequestBuilder<Item>
     */
    open class func listsListIdTasksPostWithRequestBuilder(listId: Int, createItemRequest: CreateItemRequest) -> RequestBuilder<Item> {
        var localVariablePath = "/lists/{listId}/tasks"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Item>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all tasks with delta sync

     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - parameter listId: (query) Filter by list ID (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksGet(since: Date? = nil, listId: Int? = nil, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ItemsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        tasksGetWithRequestBuilder(since: since, listId: listId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all tasks with delta sync
     - GET /tasks
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - parameter listId: (query) Filter by list ID (optional)
     - returns: RequestBuilder<ItemsResponse>
     */
    open class func tasksGetWithRequestBuilder(since: Date? = nil, listId: Int? = nil) -> RequestBuilder<ItemsResponse> {
        let localVariablePath = "/tasks"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "list_id": (wrappedValue: listId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemsResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Complete task

     - parameter id: (path)
     - parameter completeTaskRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksIdCompletePost(id: Int, completeTaskRequest: CompleteTaskRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Item?, _ error: Error?) -> Void)) -> RequestTask {
        tasksIdCompletePostWithRequestBuilder(id: id, completeTaskRequest: completeTaskRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Complete task
     - POST /tasks/{id}/complete
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter completeTaskRequest: (body)
     - returns: RequestBuilder<Item>
     */
    open class func tasksIdCompletePostWithRequestBuilder(id: Int, completeTaskRequest: CompleteTaskRequest) -> RequestBuilder<Item> {
        var localVariablePath = "/tasks/{id}/complete"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: completeTaskRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Item>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete task

     - parameter id: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksIdDelete(id: Int, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        tasksIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete task
     - DELETE /tasks/{id}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - returns: RequestBuilder<Void>
     */
    open class func tasksIdDeleteWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/tasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Submit task explanation

     - parameter id: (path)
     - parameter explanationRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksIdExplanationsPost(id: Int, explanationRequest: ExplanationRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TaskExplanation?, _ error: Error?) -> Void)) -> RequestTask {
        tasksIdExplanationsPostWithRequestBuilder(id: id, explanationRequest: explanationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit task explanation
     - POST /tasks/{id}/explanations
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter explanationRequest: (body)
     - returns: RequestBuilder<TaskExplanation>
     */
    open class func tasksIdExplanationsPostWithRequestBuilder(id: Int, explanationRequest: ExplanationRequest) -> RequestBuilder<TaskExplanation> {
        var localVariablePath = "/tasks/{id}/explanations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: explanationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaskExplanation>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get task by ID

     - parameter id: (path)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksIdGet(id: Int, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Item?, _ error: Error?) -> Void)) -> RequestTask {
        tasksIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get task by ID
     - GET /tasks/{id}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - returns: RequestBuilder<Item>
     */
    open class func tasksIdGetWithRequestBuilder(id: Int) -> RequestBuilder<Item> {
        var localVariablePath = "/tasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Item>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update task

     - parameter id: (path)
     - parameter updateItemRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksIdPut(id: Int, updateItemRequest: UpdateItemRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Item?, _ error: Error?) -> Void)) -> RequestTask {
        tasksIdPutWithRequestBuilder(id: id, updateItemRequest: updateItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update task
     - PUT /tasks/{id}
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter updateItemRequest: (body)
     - returns: RequestBuilder<Item>
     */
    open class func tasksIdPutWithRequestBuilder(id: Int, updateItemRequest: UpdateItemRequest) -> RequestBuilder<Item> {
        var localVariablePath = "/tasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Item>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reassign task

     - parameter id: (path)
     - parameter reassignTaskRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksIdReassignPatch(id: Int, reassignTaskRequest: ReassignTaskRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Item?, _ error: Error?) -> Void)) -> RequestTask {
        tasksIdReassignPatchWithRequestBuilder(id: id, reassignTaskRequest: reassignTaskRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reassign task
     - PATCH /tasks/{id}/reassign
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter reassignTaskRequest: (body)
     - returns: RequestBuilder<Item>
     */
    open class func tasksIdReassignPatchWithRequestBuilder(id: Int, reassignTaskRequest: ReassignTaskRequest) -> RequestBuilder<Item> {
        var localVariablePath = "/tasks/{id}/reassign"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reassignTaskRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Item>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
