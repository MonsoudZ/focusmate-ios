//
// DevicesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class DevicesAPI {
    /**
     Register device

     - parameter deviceRegistrationRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func devicesPost(deviceRegistrationRequest: DeviceRegistrationRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceRegistrationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        devicesPostWithRequestBuilder(deviceRegistrationRequest: deviceRegistrationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Register device
     - POST /devices
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter deviceRegistrationRequest: (body)
     - returns: RequestBuilder<DeviceRegistrationResponse>
     */
    open class func devicesPostWithRequestBuilder(deviceRegistrationRequest: DeviceRegistrationRequest) -> RequestBuilder<DeviceRegistrationResponse> {
        let localVariablePath = "/devices"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceRegistrationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceRegistrationResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update device token

     - parameter updateDeviceTokenRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func devicesTokenPut(updateDeviceTokenRequest: UpdateDeviceTokenRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        devicesTokenPutWithRequestBuilder(updateDeviceTokenRequest: updateDeviceTokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update device token
     - PUT /devices/token
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter updateDeviceTokenRequest: (body)
     - returns: RequestBuilder<Void>
     */
    open class func devicesTokenPutWithRequestBuilder(updateDeviceTokenRequest: UpdateDeviceTokenRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/devices/token"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDeviceTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
