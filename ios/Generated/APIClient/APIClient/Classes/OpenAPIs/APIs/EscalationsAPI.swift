//
// EscalationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class EscalationsAPI {
    /**
     Get blocking tasks

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func escalationsBlockingGet(apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockingTasksResponse?, _ error: Error?) -> Void)) -> RequestTask {
        escalationsBlockingGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get blocking tasks
     - GET /escalations/blocking
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<BlockingTasksResponse>
     */
    open class func escalationsBlockingGetWithRequestBuilder() -> RequestBuilder<BlockingTasksResponse> {
        let localVariablePath = "/escalations/blocking"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockingTasksResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Resolve escalation

     - parameter id: (path)
     - parameter resolveEscalationRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func escalationsIdResolvePatch(id: Int, resolveEscalationRequest: ResolveEscalationRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EscalationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        escalationsIdResolvePatchWithRequestBuilder(id: id, resolveEscalationRequest: resolveEscalationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Resolve escalation
     - PATCH /escalations/{id}/resolve
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter id: (path)
     - parameter resolveEscalationRequest: (body)
     - returns: RequestBuilder<EscalationResponse>
     */
    open class func escalationsIdResolvePatchWithRequestBuilder(id: Int, resolveEscalationRequest: ResolveEscalationRequest) -> RequestBuilder<EscalationResponse> {
        var localVariablePath = "/escalations/{id}/resolve"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resolveEscalationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EscalationResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create escalation

     - parameter escalationRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func escalationsPost(escalationRequest: EscalationRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EscalationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        escalationsPostWithRequestBuilder(escalationRequest: escalationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create escalation
     - POST /escalations
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter escalationRequest: (body)
     - returns: RequestBuilder<EscalationResponse>
     */
    open class func escalationsPostWithRequestBuilder(escalationRequest: EscalationRequest) -> RequestBuilder<EscalationResponse> {
        let localVariablePath = "/escalations"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: escalationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EscalationResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
