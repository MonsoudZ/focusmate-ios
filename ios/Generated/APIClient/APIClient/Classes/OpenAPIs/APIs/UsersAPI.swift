//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class UsersAPI {
    /**
     Get current user profile

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func profileGet(apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserProfile?, _ error: Error?) -> Void)) -> RequestTask {
        profileGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get current user profile
     - GET /profile
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<UserProfile>
     */
    open class func profileGetWithRequestBuilder() -> RequestBuilder<UserProfile> {
        let localVariablePath = "/profile"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserProfile>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get users with delta sync

     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGet(since: Date? = nil, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UserDTO]?, _ error: Error?) -> Void)) -> RequestTask {
        usersGetWithRequestBuilder(since: since).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get users with delta sync
     - GET /users
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter since: (query) ISO8601 timestamp for delta sync (optional)
     - returns: RequestBuilder<[UserDTO]>
     */
    open class func usersGetWithRequestBuilder(since: Date? = nil) -> RequestBuilder<[UserDTO]> {
        let localVariablePath = "/users"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserDTO]>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
