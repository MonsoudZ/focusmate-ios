//
// AuthenticationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class AuthenticationAPI {
    /**
     Refresh authentication token

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authRefreshPost(apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenRefreshResponse?, _ error: Error?) -> Void)) -> RequestTask {
        authRefreshPostWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Refresh authentication token
     - POST /auth/refresh
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<TokenRefreshResponse>
     */
    open class func authRefreshPostWithRequestBuilder() -> RequestBuilder<TokenRefreshResponse> {
        let localVariablePath = "/auth/refresh"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenRefreshResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sign in user

     - parameter signInRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authSignInPost(signInRequest: SignInRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SignInResponse?, _ error: Error?) -> Void)) -> RequestTask {
        authSignInPostWithRequestBuilder(signInRequest: signInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sign in user
     - POST /auth/sign_in
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter signInRequest: (body)
     - returns: RequestBuilder<SignInResponse>
     */
    open class func authSignInPostWithRequestBuilder(signInRequest: SignInRequest) -> RequestBuilder<SignInResponse> {
        let localVariablePath = "/auth/sign_in"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignInResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sign out user

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authSignOutDelete(apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        authSignOutDeleteWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sign out user
     - DELETE /auth/sign_out
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<Void>
     */
    open class func authSignOutDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/auth/sign_out"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sign up new user

     - parameter signUpRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authSignUpPost(signUpRequest: SignUpRequest, apiResponseQueue: DispatchQueue = APIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SignUpResponse?, _ error: Error?) -> Void)) -> RequestTask {
        authSignUpPostWithRequestBuilder(signUpRequest: signUpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sign up new user
     - POST /auth/sign_up
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter signUpRequest: (body)
     - returns: RequestBuilder<SignUpResponse>
     */
    open class func authSignUpPostWithRequestBuilder(signUpRequest: SignUpRequest) -> RequestBuilder<SignUpResponse> {
        let localVariablePath = "/auth/sign_up"
        let localVariableURLString = APIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signUpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignUpResponse>.Type = APIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
