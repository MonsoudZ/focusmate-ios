//
// BlockingTask.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct BlockingTask: Codable, JSONEncodable, Hashable {
    public var id: Int
    public var name: String
    public var description: String?
    public var dueDate: Date?
    public var listId: Int
    public var listName: String
    public var escalationCount: Int
    public var lastEscalatedAt: Date?
    public var blockingReason: String?

    public init(id: Int, name: String, description: String? = nil, dueDate: Date? = nil, listId: Int, listName: String, escalationCount: Int, lastEscalatedAt: Date? = nil, blockingReason: String? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.dueDate = dueDate
        self.listId = listId
        self.listName = listName
        self.escalationCount = escalationCount
        self.lastEscalatedAt = lastEscalatedAt
        self.blockingReason = blockingReason
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case dueDate
        case listId = "list_id"
        case listName = "list_name"
        case escalationCount = "escalation_count"
        case lastEscalatedAt = "last_escalated_at"
        case blockingReason = "blocking_reason"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(dueDate, forKey: .dueDate)
        try container.encode(listId, forKey: .listId)
        try container.encode(listName, forKey: .listName)
        try container.encode(escalationCount, forKey: .escalationCount)
        try container.encodeIfPresent(lastEscalatedAt, forKey: .lastEscalatedAt)
        try container.encodeIfPresent(blockingReason, forKey: .blockingReason)
    }
}

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension BlockingTask: Identifiable {}
