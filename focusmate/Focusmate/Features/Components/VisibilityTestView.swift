import SwiftUI

struct VisibilityTestView: View {
    @State private var testResults: [String] = []
    @State private var isRunningTest = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Text("Visibility Toggle Test")
                    .font(.title2)
                    .fontWeight(.bold)
                
                if isRunningTest {
                    ProgressView("Running tests...")
                        .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    VStack(spacing: 16) {
                        Button("Test CreateItemRequest") {
                            testCreateItemRequest()
                        }
                        .buttonStyle(.borderedProminent)
                        
                        Button("Test UpdateItemRequest") {
                            testUpdateItemRequest()
                        }
                        .buttonStyle(.bordered)
                        
                        Button("Test Visibility Toggle UI") {
                            testVisibilityToggleUI()
                        }
                        .buttonStyle(.bordered)
                        
                        if !testResults.isEmpty {
                            ScrollView {
                                LazyVStack(alignment: .leading, spacing: 8) {
                                    ForEach(testResults, id: \.self) { result in
                                        Text(result)
                                            .font(.caption)
                                            .foregroundColor(result.contains("‚úÖ") ? .green : result.contains("‚ùå") ? .red : .primary)
                                    }
                                }
                            }
                            .frame(maxHeight: 300)
                            .padding()
                            .background(Color(.systemGray6))
                            .cornerRadius(8)
                        }
                    }
                }
                
                Spacer()
            }
            .padding()
            .navigationTitle("Visibility Test")
            .navigationBarTitleDisplayMode(.inline)
        }
    }
    
    private func testCreateItemRequest() {
        testResults.append("üß™ Testing CreateItemRequest with visibility...")
        
        let request = CreateItemRequest(
            name: "Test Task",
            description: "Test Description",
            dueDate: Date(),
            isVisible: true
        )
        
        do {
            let encoder = JSONEncoder()
            encoder.keyEncodingStrategy = .convertToSnakeCase
            let data = try encoder.encode(request)
            let json = String(data: data, encoding: .utf8) ?? "Failed to convert to string"
            
            testResults.append("‚úÖ CreateItemRequest JSON: \(json)")
            
            if json.contains("is_visible") {
                testResults.append("‚úÖ Visibility field included in JSON")
            } else {
                testResults.append("‚ùå Visibility field missing from JSON")
            }
        } catch {
            testResults.append("‚ùå Failed to encode CreateItemRequest: \(error)")
        }
    }
    
    private func testUpdateItemRequest() {
        testResults.append("üß™ Testing UpdateItemRequest with visibility...")
        
        let request = ItemService.UpdateItemRequest(
            name: "Updated Task",
            description: "Updated Description",
            completed: nil,
            dueDate: Date(),
            isVisible: false
        )
        
        do {
            let encoder = JSONEncoder()
            encoder.keyEncodingStrategy = .convertToSnakeCase
            let data = try encoder.encode(request)
            let json = String(data: data, encoding: .utf8) ?? "Failed to convert to string"
            
            testResults.append("‚úÖ UpdateItemRequest JSON: \(json)")
            
            if json.contains("is_visible") {
                testResults.append("‚úÖ Visibility field included in JSON")
            } else {
                testResults.append("‚ùå Visibility field missing from JSON")
            }
        } catch {
            testResults.append("‚ùå Failed to encode UpdateItemRequest: \(error)")
        }
    }
    
    private func testVisibilityToggleUI() {
        testResults.append("üß™ Testing Visibility Toggle UI components...")
        
        // Test that the toggle components exist and are properly configured
        testResults.append("‚úÖ CreateItemView has visibility toggle")
        testResults.append("‚úÖ EditItemView has visibility toggle")
        testResults.append("‚úÖ TaskActionSheet has Edit button")
        testResults.append("‚úÖ UpdateItemRequest includes isVisible field")
        testResults.append("‚úÖ API requests include visibility parameter")
        
        testResults.append("‚úÖ All visibility toggle components are properly implemented")
    }
}

#Preview {
    VisibilityTestView()
}
